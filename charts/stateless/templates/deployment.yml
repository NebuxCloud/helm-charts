{{- range $workloadKey, $workload := .Values.workloads }}
{{- $hasComponents := gt (len $.Values.workloads) 1 }}
{{- $isBlueGreen := hasKey $workload.strategy "blueGreenUpdate" }}
{{- range $slot := ($isBlueGreen | ternary (tuple "blue" "green") (tuple "")) }}
---
kind: Deployment
apiVersion: apps/v1

metadata:
  name: "{{ $.Release.Name }}{{ if $hasComponents }}-{{ $workloadKey }}{{ end }}{{ if $isBlueGreen }}-{{ $slot }}{{ end }}"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    app.kubernetes.io/instance: "{{ $.Release.Name }}"
    {{- if $hasComponents }}
    app.kubernetes.io/component: "{{ $workloadKey }}"
    {{- end }}
    {{- if $isBlueGreen }}
    app.kubernetes.io/slot: "{{ $slot }}"
    {{- end }}

spec:
  {{- if $isBlueGreen }}
  {{- $strategy := $workload.strategy.blueGreenUpdate }}
  {{- $isOngoing := ne $strategy.currentSlot $strategy.targetSlot }}
  {{- $isCurrent := eq $strategy.currentSlot $slot }}
  {{- if $isCurrent }}
  replicas: {{ $strategy.currentReplicas }}
  {{- else if $isOngoing }}
  replicas: {{ $strategy.pastReplicas }}
  {{- else }}
  replicas: 0
  {{- end }}
  {{- else if $workload.replicas }}
  replicas: {{ $workload.replicas }}
  {{- end }}

  revisionHistoryLimit: {{ $workload.revisionHistoryLimit }}

  {{- if not $isBlueGreen }}
  strategy: {{ toYaml $workload.strategy | nindent 4 }}
  {{- end }}

  selector:
    matchLabels:
      app.kubernetes.io/instance: "{{ $.Release.Name }}"
      {{- if $hasComponents }}
      app.kubernetes.io/component: "{{ $workloadKey }}"
      {{- end }}
      {{- if $isBlueGreen }}
      app.kubernetes.io/slot: "{{ $slot }}"
      {{- end }}

  template:
    metadata:
      labels:
        app.kubernetes.io/instance: "{{ $.Release.Name }}"
        {{- if $hasComponents }}
        app.kubernetes.io/component: "{{ $workloadKey }}"
        {{- end }}
        {{- if $isBlueGreen }}
        app.kubernetes.io/slot: "{{ $slot }}"
        {{- end }}
      annotations:
        configmaps-hash: "{{ $.Values.configMaps | toYaml | sha256sum | trunc 8 }}"
        secrets-hash: "{{ $.Values.secrets | toYaml | sha256sum | trunc 8 }}"

    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/instance: "{{ $.Release.Name }}"
              {{- if $hasComponents }}
              app.kubernetes.io/component: "{{ $workloadKey }}"
              {{- end }}
              {{- if $isBlueGreen }}
              app.kubernetes.io/slot: "{{ $slot }}"
              {{- end }}

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                        - "{{ $.Release.Name }}"
                    {{- if $hasComponents }}
                    - key: app.kubernetes.io/component
                      operator: In
                      values:
                        - "{{ $workloadKey }}"
                    {{- end }}
                    {{- if $isBlueGreen }}
                    - key: app.kubernetes.io/slot
                      operator: In
                      values:
                        - "{{ $slot }}"
                    {{- end }}

      {{- range $containerType := tuple "initContainers" "containers" }}
      {{- if hasKey $workload $containerType }}
      {{ $containerType }}:
        {{- range $containerName, $container := index $workload $containerType }}
        - name: "{{ $containerName }}"

          {{- $hasSlottedImage := kindIs "map" $container.image }}
          {{- if not $hasSlottedImage }}
          image: "{{ $container.image }}"
          {{- else }}
          image: "{{ index $container "image" $slot }}"
          {{- end }}

          {{- if hasKey $container "command" }}
          command: {{ toYaml $container.command | nindent 12 }}
          {{- end }}

          {{- if hasKey $container "args" }}
          args: {{ toYaml $container.args | nindent 12 }}
          {{- end }}

          {{- if hasKey $container "envFrom" }}
          envFrom:
            {{- range $configMap := $container.envFrom.configMaps }}
            - configMapRef:
                name: "{{ $.Release.Name }}{{ if gt (len $.Values.configMaps) 1 }}-{{ $configMap }}{{ end }}"
            {{- end }}
            {{- range $secret := $container.envFrom.secrets }}
            - secretRef:
                name: "{{ $.Release.Name }}{{ if gt (len $.Values.secrets) 1 }}-{{ $secret }}{{ end }}"
            {{- end }}
          {{- end }}

          {{- if hasKey $container "env" }}
          env: {{ toYaml $container.env | nindent 12 }}
          {{- end }}

          {{- if hasKey $container "volumeMounts" }}
          volumeMounts: {{ toYaml $container.volumeMounts | nindent 12 }}
          {{- end }}

          {{- if hasKey $container "resources" }}
          resources: {{ toYaml $container.resources | nindent 12 }}
          {{- end }}

          {{- if hasKey $container "ports" }}
          ports: {{ toYaml $container.ports | nindent 12 }}
          {{- end }}

          {{- range $probeType, $probeConfig := $container.probes }}
          {{ $probeType }}Probe: {{ toYaml $probeConfig | nindent 12 }}
          {{- end }}

          {{- if hasKey $container "securityContext" }}
          securityContext: {{ toYaml $container.securityContext | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- end }}

      {{- if hasKey $workload "securityContext" }}
      securityContext: {{ toYaml $workload.securityContext | nindent 8 }}
      {{- end }}

      {{- if hasKey $workload "volumes" }}
      volumes:
        {{- range $volume := $workload.volumes }}
        - name: "{{ $volume.name }}"
          {{- if hasKey $volume "configMap" }}
          configMap:
            name: "{{ $.Release.Name }}{{ if gt (len $.Values.configMaps) 1 }}-{{ $volume.configMap.name }}{{ end }}"
          {{- end }}
          {{- if hasKey $volume "secret" }}
          secret:
            secretName: "{{ $.Release.Name }}{{ if gt (len $.Values.secrets) 1 }}-{{ $volume.secret.secretName }}{{ end }}"
          {{- end }}
        {{- end }}
      {{- end }}

      {{- if hasKey $workload "imagePullSecrets" }}
      imagePullSecrets: {{ toYaml $workload.imagePullSecrets | nindent 8 }}
      {{- end }}
{{- end }}
{{- end }}
